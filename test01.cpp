//#include<iostream>
//using namespace std;
//	//	函数的重载！
////函数重载满足的条件
////1.在同一个作用域
////2.函数名相同
////3.参数的类型或数量或顺序不同
////返回值不同并不能作为重载的条件！
////因为在调用函数时，只能输入参数，而返回值类型的不同无法区分到底调用哪个函数！(有些情况时可以区分的，但是并没有普适性！)
//
////构造函数func()
//void func() {
//	cout << "你好" << endl;
//}
//
//void func(int &a, int b) {// 引用类型作为参数时，其对应的实参必须是同类型的变量而不是一个常数
//	cout << "再见" << endl;
//}
//
//void func(int a) {
//	cout << "我想" << endl;
//}
//
//void func(int a, int b = 10) { //在重载中添加默认参数时，容易导致重载发生歧义！
//	cout << "ai" << endl;
//}
//
//void func(const int a){
//	cout << "Ni" << endl;
//}
//
//void func(int& a) {
//	cout << "kexi" << endl;
//}
//
//void func(const int& a) {
//	cout << "bushini" << endl;
//}
//
////int main() {
//	int a = 10;
//	func();//调用前者，其不需要传递参数
//
//	func(a, 20);//调用后者，传递的参数必须是对应类型的变量
//
//	//func(a);//传递一个对应类型的变量时，引用和非引用是无法区分的，也就是这种情况不能重载
//
//	//func(10);//传递的参数为常量，3和5的传递的参数类型没有区别，所以这两者不能互相重载！
//
//	return 0;
//}
//
////引用变量指向的值必须在栈或者堆区，如果直接引用一个常量会造成语法错误，因为常量位于常量区！
////例如 int &a = 10;//这是语法错误的句子；
////const int &a = 10;//这是合法的语法，因为编译器对其进行了转化：const int temp = 10； int a = temp; 
//
//
// 

